// enforce-foo-bar.test.js
import { RuleTester } from "eslint";
import jsxNoBind from "../rules/jsx-no-bind.js";

const ruleTester = new RuleTester({
  parserOptions: {
    sourceType: "module",
    ecmaVersion: "latest",
    ecmaFeatures: {
      jsx: true,
    },
  },
});

ruleTester.run('jsx-no-bind', jsxNoBind, {
  valid: [
    {
      code: `
        import React from 'react';

        function MyComponent() {
          const handleClick = useCallback(() => {
            console.log('Clicked!');
          }, []);

          return <div onClick={this.handleClick}>Click me</div>;
        }
      `,
    },
    {
      code: `
        import React from 'react';

        function MyComponent() {
          const handleClick = useCallback(() => {
            console.log('Clicked!');
          }, []);

          return <div onClick={this.handleClick.bind(this)}>Click me</div>;
        }
      `,
      options: [{ allowBind:true }]
    },
    {
      code: `
        import React from 'react';

        function MyComponent() {

          return <div onClick={() => {console.log("Hello!")}}>Click me</div>;
        }
      `,
      options: [{ allowArrowFunctions:true }]
    },
  ],
  invalid: [
    //Ejemplo con bind invalido sin import
    {
      code: `
        import React from 'react';

        function MyComponent() {
          return <div onClick={this.handleClick.bind(this)}>Click me</div>;
        }
      `,
      output: `
        import React from 'react';

        import { useCallback } from 'react';

function MyComponent() {
          const autoGeneratedCallback = useCallback(this.handleClick, []);
\treturn <div onClick={autoGeneratedCallback}>Click me</div>;
        }
      `,
      errors: [
        {
          message: 'Avoid using .bind() in JSX props.',
        },
      ],
    },
    //Ejemplo con bind invalido con import
    {
      code: `
        import React, { useCallback } from 'react';

        function MyComponent() {
          return <div onClick={this.handleClick.bind(this)}>Click me</div>;
        }
      `,
      output: `
        import React, { useCallback } from 'react';

        function MyComponent() {
          const autoGeneratedCallback = useCallback(this.handleClick, []);
\treturn <div onClick={autoGeneratedCallback}>Click me</div>;
        }
      `,
      errors: [
        {
          message: 'Avoid using .bind() in JSX props.',
        },
      ],
    },
    //Ejemplo con arrow function invalido sin import y sin parametros
    {
      code: `
        import React from 'react';

        function MyComponent() {
          return <div onClick={() => {console.log("Hello!")}}>Click me</div>;
        }
      `,
      output: `
        import React from 'react';

        import { useCallback } from 'react';

function MyComponent() {
          const autoGeneratedCallback = useCallback(() => {console.log("Hello!")}, []);
\treturn <div onClick={autoGeneratedCallback}>Click me</div>;
        }
      `,
      errors: [
        {
          message: 'Avoid using arrow functions in JSX props.',
        },
      ],
    },
    //Ejemplo con arrow function invalido con import y sin parametros
    {
      code: `
        import React, { useCallback } from 'react';

        function MyComponent() {
          return <div onClick={() => {console.log("Hello!")}}>Click me</div>;
        }
      `,
      output: `
        import React, { useCallback } from 'react';

        function MyComponent() {
          const autoGeneratedCallback = useCallback(() => {console.log("Hello!")}, []);
\treturn <div onClick={autoGeneratedCallback}>Click me</div>;
        }
      `,
      errors: [
        {
          message: 'Avoid using arrow functions in JSX props.',
        },
      ],
    },
    //Ejemplo con arrow function invalido sin import y con parametros
    {
      code: `
        import React from 'react';

        function MyComponent(props) {
          return <div onClick={() => {console.log("Hello!" + props + hello())}}>Click me</div>;
        }
      `,
      output: `
        import React from 'react';

        import { useCallback } from 'react';

function MyComponent(props) {
          const autoGeneratedCallback = useCallback(() => {console.log("Hello!" + props + hello())}, [props]);
\treturn <div onClick={autoGeneratedCallback}>Click me</div>;
        }
      `,
      errors: [
        {
          message: 'Avoid using arrow functions in JSX props.',
        },
      ],
    },
  ],
});
